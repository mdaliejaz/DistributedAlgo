import sys
import da
import random
import xml.etree.ElementTree as ET
from util import DBResponse
from threading import Timer


class Database(process):
    def setup(config):
        dbInitFile = str(config.get("setup", "dbInitFile"))
        minDbLatency = int(config.get("setup", "minDbLatency"))
        maxDbLatency = int(config.get("setup", "maxDbLatency"))

        self.root = ET.parse(dbInitFile).getroot()
        self.subjectMap = {}
        self.resourceMap = {}
        self.waitTime = random.randint(minDbLatency, maxDbLatency)

    def receive(msg=('worker_get_from_db', request), from_=p):
        output("in db: received request from worker for subject id " + str(
            request.subjectID))
        evaluation = True
        subjAttribDiff = {}
        resourceAttribDiff = {}
        subjectID = str(request.subjectID)
        resourceID = str(request.resourceID)

        if subjectID not in self.subjectMap:
            self.subjectMap[subjectID] = {}
        if resourceID not in self.resourceMap:
            self.resourceMap[resourceID] = {}

        try:
            subjAttribDiffSet = request.requiredSubjAtrribs - set(
                request.subjectAttributeMap.keys())
            resourceAttribDiffSet = request.requiredResourceAtrribs - set(
                request.resourceAttributeMap.keys())

            for subj in subjAttribDiffSet:
                try:
                    subjAttribDiff[subj] = self.subjectMap[subjectID][subj]
                except:
                    self.subjectMap[subjectID][subj] = ""
                    subjAttribDiff[subj] = ""

            for resource in resourceAttribDiffSet:
                try:
                    resourceAttribDiff[resource] = self.resourceMap[resourceID][
                        resource]
                except:
                    self.resourceMap[resourceID][resource] = ""
                    resourceAttribDiff[resource] = ""
        except:
            evaluation = False

        response = DBResponse(request, evaluation, subjAttribDiff,
                              resourceAttribDiff)
        send(('db_work_done', response), to=p)

    def receive(msg=('COMMIT_TO_DB', updateMap, instance), from_=p):
        Timer(waitTime, updateFunc, [updateMap, instance]).start()

    def updateFunc(updateMap, instance):
        key = next(iter(updateMap))
        value = updateMap[key]
        if (instance == "resource"):
            self.resourceMap[key].update(value)
        else:
            self.subjectMap[key].update(value)
            # Log Db update complete

    def run():
        output('database starting...')
        for subject in root.iter('subject'):
            for attributes in subject:
                subjectMap[subject.attrib['id']] = attributes.attrib
        print(subjectMap)
        for resource in root.iter('resource'):
            for attributes in resource:
                resourceMap[resource.attrib['id']] = attributes.attrib
        print(resourceMap)
        await(received(('done',)))

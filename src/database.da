import sys
import da
import random
import logging
import logging.config
import logging.handlers
import xml.etree.ElementTree as ET
from util import DBResponse
from threading import Timer


class Database(process):
    def setup(config):
        self.logger = logging.getLogger('Log.' + __name__)
        self.dbInitFile = str(config.get("setup", "dbInitFile"))
        self.minDbLatency = int(config.get("setup", "minDbLatency"))
        self.maxDbLatency = int(config.get("setup", "maxDbLatency"))

        self.root = ET.parse(dbInitFile).getroot()
        self.subjectMap = {}
        self.resourceMap = {}
        self.waitTime = random.randint(minDbLatency, maxDbLatency)

    def receive(msg=('GET_FROM_DB', request), from_=p):
        logger.info("Received request from Worker to get attributes for "
                    "following request:%s", request)
        evaluation = True
        subjAttribDiff = {}
        resourceAttribDiff = {}
        subjectID = str(request.subjectID)
        resourceID = str(request.resourceID)

        if subjectID not in self.subjectMap:
            self.subjectMap[subjectID] = {}
        if resourceID not in self.resourceMap:
            self.resourceMap[resourceID] = {}

        try:
            subjAttribDiffSet = request.requiredSubjAtrribs - set(
                request.subjectAttributeMap.keys())
            resourceAttribDiffSet = request.requiredResourceAtrribs - set(
                request.resourceAttributeMap.keys())

            for subj in subjAttribDiffSet:
                try:
                    subjAttribDiff[subj] = self.subjectMap[subjectID][subj]
                except:
                    self.subjectMap[subjectID][subj] = ""
                    subjAttribDiff[subj] = ""

            for resource in resourceAttribDiffSet:
                try:
                    resourceAttribDiff[resource] = self.resourceMap[resourceID][
                        resource]
                except:
                    self.resourceMap[resourceID][resource] = ""
                    resourceAttribDiff[resource] = ""
        except:
            evaluation = False

        response = DBResponse(request, evaluation, subjAttribDiff,
                              resourceAttribDiff)
        logger.info("Sending following response to Worker with updated "
                    "attributes from database:%s", response)
        send(('DB_RESPONSE', response), to=p)

    def receive(msg=('COMMIT_TO_DB', updateMap, instance), from_=p):
        logger.info("Received to update database for %s attributes with map: "
                    "%s. Accounting DB latency, will wait for latency of "
                    "value %s units duration before committing to DB",
                    instance, updateMap, str(self.waitTime))
        Timer(waitTime, updateFunc, [updateMap, instance]).start()

    def updateFunc(updateMap, instance):
        key = next(iter(updateMap))
        value = updateMap[key]
        if (instance == "resource"):
            self.resourceMap[key].update(value)
        else:
            self.subjectMap[key].update(value)
        logger.info("Successfully updated database for %s attributes "
                    "with map: %s", instance, updateMap)

    def run():
        logger.info("Started Database Instance with dbInitFile = %s, "
                    "Min DB Latency = %s and Max DB Latency = %s",
                    self.dbInitFile, self.minDbLatency, self.maxDbLatency)
        for subject in root.iter('subject'):
            for attributes in subject:
                subjectMap[subject.attrib['id']] = attributes.attrib
        # print(subjectMap)
        for resource in root.iter('resource'):
            for attributes in resource:
                resourceMap[resource.attrib['id']] = attributes.attrib
        # print(resourceMap)
        logger.info("Initialized DB with:"
                    "\n\tSubject Attributes = %s"
                    "\n\tResource Attributes = %s", subjectMap, resourceMap)
        await(received(('done',)))

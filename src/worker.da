import sys
import da
import xml.etree.ElementTree as ET
import logging
import logging.config
import logging.handlers
from util import PolicyRule
from util import Response


class Worker(process):
    def setup(coordinators, dbInstance, config):
        self.logger = logging.getLogger('Log.' + __name__)
        self.coordinators = coordinators
        self.policyMap = {}
        self.size = len(coordinators)
        self.policyFile = config.get("setup", "policyFile")
        readPolicy(self.policyFile)

    def receive(msg=('WORKER_ASSIGN', request)):
        # policy evaluation
        logger.info("Received message from coordinator for Request:"
                    "\n\tSubject ID: %d"
                    "\n\tResource ID: %d"
                    "\n\tAction: %s}",
                    request.subjectID, request.subjectID, request.action)
        # For all the rules associated for that action
        for rule in policyMap[request.action]:
            for k in rule.subjectCondition.keys():
                request.requiredSubjAtrribs.add(k)
            for k in rule.resourceCondition.keys():
                request.requiredResourceAtrribs.add(k)
        logger.info("Sending message to initiate database read for attributes "
                    "not in cache for Request:%s", request)
        send(('worker_get_from_db', request), to=dbInstance)

    def conditionSatisfied(policyValue, mapValue):
        if ((len(policyValue) > 0 and len(mapValue) > 0) and
                (policyValue[0] == ">" or policyValue[0] == "<")):
            try:
                policyNum = int(policyValue[1:])
                dbNum = int(mapValue)
                if (policyValue[0] == "<"):
                    return policyNum > dbNum
                else:
                    return policyNum < dbNum
            except:
                return False
        else:
            return policyValue == mapValue

    def validateRule(conditions, attribMap, attribSet, subjAttribReqd,
                     resourceAttribReqd):
        for k in conditions.keys():
            attribSet.add(k)
            policyVal = conditions[k]

            if (conditions[k].startswith('$')):
                policyVal = checkDollar(conditions[k],
                                        subjAttribReqd, resourceAttribReqd)
            if not conditionSatisfied(policyVal, attribMap[k]):
                return False
        return True

    def checkDollar(value, subjAttribReqd, resourceAttribReqd):
        if (value.startswith('$')):
            sOrR, attrib = value.split('.')
            sOrR = sOrR[1:]
            if (sOrR == "resource"):
                return resourceAttribReqd[attrib]
            else:
                return subjAttribReqd[attrib]
        return None

    def getUpdatedMaps(ruleUpdate, attribMap, subjAttribReqd,
                       resourceAttribReqd):
        updateMap = {}
        if (ruleUpdate == None):
            return updateMap
        for k, v in ruleUpdate.items():
            if (v == "++"):
                updateMap[k] = str(int(attribMap[k]) + 1)
            elif (v == "--"):
                updateMap[k] = str(int(attribMap[k]) - 1)
            else:
                updateMap[k] = v
                retVal = checkDollar(v, subjAttribReqd, resourceAttribReqd)
                if retVal is not None:
                    updateMap[k] = retVal

        return updateMap

    def mergeMaps(dbMap, inputMap):
        result = {}
        for k, v in dbMap.items():
            result[k] = v
        for k, v in inputMap.items():
            result[k] = v[0]
        return result

    def receive(msg=('db_work_done', dbresponse)):
        logger.info("Received following DB response:%s", dbresponse)
        subjAttribReqd = mergeMaps(dbresponse.readDbSubjectMap,
                                   dbresponse.request.subjectAttributeMap)
        resourceAttribReqd = mergeMaps(dbresponse.readDbResourceMap,
                                       dbresponse.request.resourceAttributeMap)

        ruleMatch = False
        readSubjAttrib = set()
        readResourceAttrib = set()

        for rule in policyMap[dbresponse.request.action]:
            if (validateRule(rule.subjectCondition, subjAttribReqd,
                             readSubjAttrib, subjAttribReqd,
                             resourceAttribReqd) and
                    validateRule(rule.resourceCondition, resourceAttribReqd,
                                 readResourceAttrib, subjAttribReqd,
                                 resourceAttribReqd)):
                ruleMatch = True
                break

        readDbSubjMap = {}
        readDbresourceMap = {}
        readSubjMap = {}
        readresourceMap = {}
        # Check read attribute is from tentative cache or 'db read'
        for val in readSubjAttrib:
            if val in dbresponse.readDbSubjectMap:
                readDbSubjMap[val] = dbresponse.readDbSubjectMap[val]
            else:
                readSubjMap[val] = dbresponse.request.subjectAttributeMap[val]

        for val in readResourceAttrib:
            if val in dbresponse.readDbResourceMap:
                readDbresourceMap[val] = dbresponse.readDbResourceMap[val]
            else:
                readresourceMap[val] = dbresponse.request.resourceAttributeMap[
                    val]

        toUpdateSubjectMap = {}
        toUpdateResourceMap = {}
        # If no rule has matched
        if ruleMatch == False:
            dbresponse.evaluation = False
        else:
            # These are the attributes updated
            toUpdateSubjectMap = getUpdatedMaps(rule.subjectUpdate,
                                                subjAttribReqd,
                                                subjAttribReqd,
                                                resourceAttribReqd)
            toUpdateResourceMap = getUpdatedMaps(rule.resourceUpdate,
                                                 resourceAttribReqd,
                                                 subjAttribReqd,
                                                 resourceAttribReqd)

        dbresponse.readDbSubjectMap = readDbSubjMap
        dbresponse.readDbResourceMap = readDbresourceMap
        response = Response(dbresponse, toUpdateSubjectMap, toUpdateResourceMap,
                            readSubjMap, readresourceMap)
        logger.info("Sending following Worker Response to Subject "
                    "Coordinator:%s", response)
        id = int(dbresponse.request.subjectID) % self.size
        send(('WORKER_RESPONSE', response), to=(coordinators[id]))

    def run():
        logger.info("Started worker to evaluate policy in file: %s",
                    self.policyFile)
        # can we print the map in a better way!
        logger.debug("Content of Policy File: %s", self.policyMap)
        await(received(('done',)))

    def readPolicy(policyFile):
        root = ET.parse(policyFile).getroot()

        for rule in root.iter('rule'):
            sc = rule.find('subjectCondition').attrib
            rc = rule.find('resourceCondition').attrib
            act = rule.find('action').attrib
            su = rule.find('subjectUpdate')
            if su != None:
                su = su.attrib
            ru = rule.find('resourceUpdate')
            if ru != None:
                ru = ru.attrib

            if (act["name"] not in self.policyMap):
                self.policyMap[act["name"]] = []
            self.policyMap[act["name"]].append(PolicyRule(sc, rc, su, ru))

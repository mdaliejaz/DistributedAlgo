import sys
import da
import uuid

class Request:
	def __init__(self, subjectID, resourceID, timestamp, action):
		self._subjectID = subjectID
		self._resourceID = resourceID
		self._timestamp = timestamp
		self._action = action
		# More

class Worker(process):

	def setup(coordinators:list, size):
		self.coordinators = coordinators
		self.size = size

	def receive(msg= ('worker_assign',subjectID, resourceID)):
		# policy evaluation from central source
		# send to subject coordinator
		output('worker received')
		id = int(subjectID) % size
		send(('worker_response',subjectID, resourceID), to=(coordinators[id]))

	def run():
		output('worker starting...')
		await(received(('done',)))

class Coordinator(process):
	def setup(coordinators:list, size):
		self.coordinators = coordinators
		self.size = size
		# Change to n workers and decide later
		self.workers = new(Worker, num= 1)
		setup(self.workers, (self.coordinators, self.size))
		start(self.workers)

	def evaluatePolicy():
		evaluationID = getUniqueID()
		timestamp = logical_clock()

	def receive(msg= ('resource_coord',request)):
		# call worker send
		output('hello from resource coordinator resource - ' + str(request._subjectID))
		send(('worker_assign',request._subjectID, request._resourceID), to=workers)

	def getUniqueID():
		return uuid.uuid4()

	def receive(msg= ('worker_response',subjectID,resourceID)):
		output('worker hello')

	def receive(msg= ('client',subjectID, resourceID)):
		output('client hello')
		# process and send to authorize of Resource coordinator
		id = int(resourceID) % size
		request = Request(subjectID, resourceID, 1, "action") # 1 is a dummy timestamp now
		evaluatePolicy()
		send(('resource_coord',request), to=(coordinators[id]))

	def run():
		output('coordinator starting...')
		await(received(('done',)))

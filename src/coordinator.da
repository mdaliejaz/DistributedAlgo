import sys
import da
import uuid

class Coordinator(process):
    def setup(subjectID: int,
                resourceID: int,
                isSubjectCoordinator: bool,
                cache: Cache):
        pass

    def evaluatePolicy():
        evaluationID = getUniqueID()
        timestamp = logical_clock()
        cache.addTimestampToQueue(subjectID, timestamp)





    def getUniqueID():
       return uuid.uuid4()

    def receive:

    def run():

        if isSubjectCoordinator:
            evaluate_policy()
        else:
            # call resource coordinator method

        output('terminating')


class Worker(process):
    def setup(subjectID: int, resourceID: int): pass


class P(process):
    def setup(s:set, nrequests:int):  # s is set of all other processes
        self.q = set()

    def mutex(task):
        -- request
        c = logical_clock()
        send(('request', c, self.id), to= s)
        q.add(('request', c, self.id))
        await(each(('request', c2, p) in q,
                   has= (c2, p)==(c, self.id) or (c, self.id) < (c2, p)) and
              each(p in s, has= some(received(('ack', c2, _p)), has= c2 > c)))
        -- critical_section
        task()
        -- release
        q.remove(('request', c, self.id))
        send(('release', logical_clock(), self.id), to= s)

    def receive(msg= ('request', c2, p)):
        q.add(('request', c2, p))
        send(('ack', logical_clock(), self.id), to= p)

    def receive(msg= ('release', _, p)):
#        q.remove(('request', _, p))  # pattern matching needed for _
#        q.remove(anyof(setof(('request', c, p), ('request', c, _p) in q)))
        for x in setof(('request', c, p), ('request', c, _p) in q):
            q.remove(x); break
#        for ('request', c, _p) in q: q.remove('request', c, p); break
#        for (tag, c, p2) in q:
#            if tag == 'request' and p2 == p:
#                q.remove((tag, c, p2)); break

    def run():
        def task():
            output('in cs')
        for i in range(nrequests):
            mutex(task)

        send(('done', self.id), to= s)
        await(each(p in s, has= received(('done', p))))
        output('terminating')

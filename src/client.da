import sys
import da
from util import Request
import logging
import logging.config
import logging.handlers
import queue
import random


class Client(process):
    def setup(coordinators, config, num):
        self.logger = logging.getLogger('Log.' + __name__)
        self.size = len(coordinators)
        self.requestQueue = queue.Queue()

        sequenceList = []
        sequence = config.get("client" + str(num), "sequence")
        if (sequence == "random"):
            sequenceList = getRandomsequenceList(config, "client" + str(num))
        else:
            sequenceList = sequence.split(',')

        for seq in sequenceList:
            requestQueue.put([int(config.get(seq, "subjectID")),
                              int(config.get(seq, "resourceID")),
                              config.get(seq, "action")])

    def getRandomsequenceList(config, client):
        numReq = int(config.get(client, "numReq"))
        requestList = config.get(client, "requestList").split(',')
        random.seed(int(config.get(client, "seed")))
        sequenceList = []

        for _ in range(0, numReq):
            randInt = random.randint(0, len(requestList) - 1)
            sequenceList.append(requestList[randInt])

        return sequenceList

    def sendToSubjectCoordinator():
        elem = requestQueue.get()
        coordID = (elem[0]) % self.size
        logger.info("Client %d sending Request{Subject ID: %d, Resource ID: "
                    "%d, action: %s} to coordinator %d", self.num, elem[0],
                    elem[1], elem[2], coordID)
        send(('CLIENT', elem[0], elem[1], elem[2], None),
             to=coordinators[coordID])

    def receive(msg=('RESULT_CLIENT', result, subjectID, resourceID, action)):
        if result == 'success':
            logger.info("Allow access to client %d for Request{Subject ID: "
                        "%d, Resource ID: %d, action: %s}", self.num, subjectID,
                        resourceID, action)
        else:
            logger.info("Deny access to client %d for Request{Subject ID: "
                        "%d, Resource ID: %d, action: %s}", self.num, subjectID,
                        resourceID, action)

        sendToSubjectCoordinator()

    def run():
        logger.info("Started Client %d", self.num)
        sendToSubjectCoordinator()
        await(received(('done',)))

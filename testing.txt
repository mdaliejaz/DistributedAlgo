                              Test Cases
                            =============

1.  Request Evaluation aborts due to conflict in Subject Attribute

    Config File:    subjectConflict.ini
    Log File:       subjectConflict.log

    Description:
    Scenario:   Tom can watch Star Wars max two times
                Number of Clients:          2
                Number of requests sent:    2 (per client)
                Request:                    1 (same for all)
                    Subject Attributes:         name="Tom" viewCount="&lt;2"
                    Resource Attributes:        type="movie"
                    Action:                     name="viewOnSubject"
                Two requests should be allowed access
                Two requests should be denied access
    Two clients with same subject and resource ID for same action send two
    requests each. All these requests try to update the same subject attribute
    resulting in a conflict and hence a restart due to conflict in Subject
    Attribute.

    Artificial Delays inserted:
    None

    Outcome:
    The test passed as expected.
    Number of allowed accesses: 2   (grep on log: "Allow access")
    Number of denied accesses:  2   (grep on log: "Deny access")
    Number of conflicts:        2   (grep on log: "Subject Coordinator:
                                                            Conflict Happened:")
    DB updated:
        Initial Snapshot    (part of DB relevant to this example)
            Subject Attributes  = {'4444': {'viewCount': '0', 'name': 'Tom'}}
	        Resource Attributes = {'666': {'movie': 'StarWars'}}
	    Final Snapshot      (part of DB relevant to this example)
	        Subject Attributes  = {'4444': {'viewCount': '2', 'name': 'Tom'}}
	        Resource Attributes = {'666': {'movie': 'StarWars'}}


2.  Request Evaluation aborts due to conflict in Resource Attribute

    Config File:    resourceConflict.ini
    Log File:       resourceConflict.log

    Description:
    Scenario:   Tom can watch Star Wars max two times
                Number of Clients:          2
                Number of requests sent:    2 (per client)
                Request:                    1 (same for all)
                    Subject Attributes:         position="viewer"
                    Resource Attributes:        type="movie" viewCount="&lt;2"
                    Action:                     name="viewOnResource"
                Two requests should be allowed access
                Two requests should be denied access
    Two clients with same subject and resource ID for same action send two
    requests each. All these requests try to update the same resource attribute
    resulting in a conflict and hence a restart due to conflict in Resource
    Attribute.

    Artificial Delays inserted:
    None

    Outcome:
    The test passed as expected.
    Number of allowed accesses: 2   (grep on log: "Allow access")
    Number of denied accesses:  2   (grep on log: "Deny access")
    Number of conflicts:        2   (grep on log: "Resource Coordinator:
                                                            Conflict Happened:")
    DB updated:
        Initial Snapshot    (part of DB relevant to this example)
            Subject Attributes  = {'2222': {'position': 'viewer'}}
	        Resource Attributes = {'888': {'type': 'movie', 'viewCount': '0'}}
	    Final Snapshot      (part of DB relevant to this example)
	        Subject Attributes  = {'2222': {'position': 'viewer'}}
	        Resource Attributes = {'888': {'type': 'movie', 'viewCount': '2'}}


3.  Request Evaluation aborts due to dependency on a tentative update

    Config File:    tentativeCacheConflict.ini
    Log File:       tentativeCacheConflict.log

    Description:
    Scenario:   Tom can watch Star Wars max two times
                Number of Clients:          3
                Number of requests sent:    1 (per client)
                Request:                    1 (client 1)
                    Subject Attributes:         name="Tom" viewCount="&lt;4"
                    Resource Attributes:        type="movie" viewCount="&lt;4"
                    Action:                     name="conflict1"
                Request:                    2 (client 2)
                    Subject Attributes:         name="Tom" viewCount="&lt;4"
                    Resource Attributes:        type="movie" viewCount="&lt;4"
                    Action:                     name="conflict2"
                Request:                    3 (client 3)
                    Subject Attributes:         name="Tom" viewCount="&lt;4"
                    Resource Attributes:        type="movie" viewCount="&lt;4"
                    Action:                     name="conflict3"
                All requests should be allowed access
    Request 1 from Client 1 updates only resource attribute. Request 2 which
    arrives 0.01 sec after Request 1 updates both Resource and Subject
    attributes. Since both Requests 1 and 2 try to insert a same Resource
    Attribute in resource cache, Request 2 would have conflict and hence
    would need to restart. Request 2's conflict check in Resource Coordinator
    is delayed by a second to allow ample amount of time for Request 3 to
    take tentative subject cache from Request 2's update. Request 3 which
    arrives 0.1 sec after Request 1 takes the tentative cache from Request
    2's response and goes for evaluation in Worker. Now since Request 2 is
    restarted due to conflict in Resource Attribute, the tentative cache that
    Request 3 took is no longer valid. Hence when Request 3's response comes
    to Subject Coordinator, it is restarted due to conflict in tentative cache.

    Artificial Delays inserted:
    Yes.
    A flag 'addCacheConflictDelay' is used to delay Request 2 by 0.01 second
    and Request 3 by 0.1 second to ensure that these requests go in order we
    want the test scenario to expect. Also, this flag is used to add extra
    computation time in Resource Coordinator conflict check for Request 2, to
    ensure tentative cache conflict happens with Request 3.

    Outcome:
    The test passed as expected.
    Number of allowed accesses: 3   (grep on log: "Allow access")
    Number of denied accesses:  0   (grep on log: "Deny access")
    Number of conflicts:        3   (grep on log: "Conflict Happened")
        1.  Subject Coordinator: Conflict Happened: The attribute viewCount
            read from tentative subject cache for this request happened to be
            reverted by a previous request
        2.  Subject Coordinator: Conflict Happened: The attribute viewCount
            read from database for Request ID =
            ae52a4f3-bc2d-4ae1-9fec-ca98a90c0757, was updated by a previous
            request
        3.  Resource Coordinator: Conflict Happened: The attribute viewCount
            read from database for Request ID =
            ff2882ab-ea1a-4d88-a96f-9171d6e51e6a, was updated by a previous
            request
        The conflict number 1 listed above is the conflict generated with
        this scenario.

    DB updated:
        Initial Snapshot    (part of DB relevant to this example)
            Subject Attributes  = {'4444': {'viewCount': '0', 'name': 'Tom'}}
	        Resource Attributes = {'888': {'viewCount': '0', 'type': 'movie'}}
	    Final Snapshot      (part of DB relevant to this example)
	        Subject Attributes  = {'4444': {'viewCount': '2', 'name': 'Tom'}}
	        Resource Attributes = {'888': {'viewCount': '2', 'type': 'movie'}}

    # Note: We get this scenario most of the time in Subject Attribute conflict
            listed in test scenario 1. But it's not guaranteed to happen in
            scenario 1.

4.  Request evaluation is delayed because it depends on a tentative update by
    a request that has not yet committed or aborted.

    Config File:    responseQueue.ini
    Log File:       responseQueue.log

    Description:
    Scenario:   Access bank A first time with wrong and correct action names
                Number of Clients:          2
                Number of requests sent:    1 (per client)
                Request:                    1 (Client 1)
                    Subject Attributes:         position="employee" history=""
                    Resource Attributes:        id="bank A"
                    Action:                     name="view"
                Request:                    2 (Client 2)
                    Subject Attributes:         position="employee" history=""
                    Resource Attributes:        id="bank A"
                    Action:                     name="read"
                Request 1 should be denied access
                Request 2 should be allowed access
    Request 1 from Client 1 takes more time to evaluate and hence the
    response for Request 2 is not serviced although the response for Request
    2 is provided much earlier. Request 1 should fail since there's no action
    named view. This action was used in combination with subject and resource
    ID to stall the response generation. Request 2 should be allowed access

    Artificial Delays inserted:
    Yes.
    A flag 'responseQueueDelay' is used to delay response evaluation for
    Request 1 by 1 second. This ensures that response for Request 2 is
    generated before than that for Request 1. The service of response for
    Request 2 is stalled until response for Request 1 is serviced.

    Outcome:
    The test passed as expected.
    Number of allowed accesses: 1   (grep on log: "Allow access")
    Number of denied accesses:  1   (grep on log: "Deny access")
    Number of conflicts:        0   (grep on log: "Conflict Happened")

    DB updated:
        Initial Snapshot    (part of DB relevant to this example)
            Subject Attributes  = {'1111': {'position': 'employee',
                                                'history': ''}}
	        Resource Attributes = {'999': {'id': 'bank A'}}
	    Final Snapshot      (part of DB relevant to this example)
	        Subject Attributes  = {'1111': {'position': 'employee',
	                                            'history': 'bank A'}}
	        Resource Attributes = {'999': {'id': 'bank A'}}

    Servicing order of Requests can be seen on console and also by grep in
    log with 'Request Queue Demo:'


5.  Request evaluation uses '$resource.Attribute' or '$subject.Attribute' value

    Config File:    dollarValue.ini
    Log File:       dollarValue.log

    Description:
    Scenario:   Access bank A first time and Access bank A again
                Number of Clients:          2
                Number of requests sent:    1 (per client)
                Request:                    1 (Client 1)
                    Subject Attributes:         position="employee" history=""
                    Resource Attributes:        id="bank A"
                    Action:                     name="read"
                Request:                    2 (Client 2)
                    Subject Attributes:         position="employee"
                                                        history="$resource.id"
                    Resource Attributes:        id="bank A"
                    Action:                     name="read"
                Both should be allowed access
    Request 1 from Client 1 is serviced for action read. When Request 2
    comes, history is no longer empty. The history value is then evaluated
    based on $resource.id which happens to be equal to bank A. Thus Request 2
    is also allowed. A conflict might happen in this scenario if both
    requests arrive at same time and are considered based on policy of Access
    bank A first time. But a restart on conflict, results in second policy
    evaluation and hence allowed access.

    Artificial Delays inserted:
    None

    Outcome:
    The test passed as expected.
    Number of allowed accesses: 2   (grep on log: "Allow access")
    Number of denied accesses:  0   (grep on log: "Deny access")
    Number of conflicts:        1   (grep on log: "Conflict Happened",
                                                   happens since both
                                                   requests start evaluationg
                                                   for first policy - expected)

    DB updated:
        Initial Snapshot    (part of DB relevant to this example)
            Subject Attributes  = {'1111': {'position': 'employee',
                                                'history': ''}}
	        Resource Attributes = {'999': {'id': 'bank A'}}
	    Final Snapshot      (part of DB relevant to this example)
	        Subject Attributes  = {'1111': {'position': 'employee',
	                                            'history': 'bank A'}}
	        Resource Attributes = {'999': {'id': 'bank A'}}


6.  Request evaluation should not be delayed for requests from different
    subject and/or resource ID

    Config File:    requestQueueDiffSubject.ini
    Log File:       requestQueueDiffSubject.log

    Description:
    Scenario:   Access bank A first time and Listeners collectively can
                listen to a song maximum 5 times
                Number of Clients:          2
                Number of requests sent:    1 (per client)
                Request:                    1 (Client 1)
                    Subject Attributes:         position="employee" history=""
                    Resource Attributes:        id="bank A"
                    Action:                     name="view"
                Request:                    2 (Client 2)
                    Subject Attributes:         position="listener"
                    Resource Attributes:        type="song" viewCount="&lt;5"
                    Action:                     name="view"
                Both should be allowed access
    Request 1 from Client 1 takes more time to evaluate but it does not stall
    the Request 2 response evaluation as it's for a different Subject and
    Resource ID.

    Artificial Delays inserted:
    Yes.
    A flag 'responseQueueDelay' is used to delay response evaluation for
    Request 1 by 1 second. This ensures that response for Request 2 is
    generated before than that for Request 1. The service of response for
    Request 2 is done without waiting for response for Request 1 to be serviced.

    Outcome:
    The test passed as expected.
    Number of allowed accesses: 1   (grep on log: "Allow access")
    Number of denied accesses:  1   (grep on log: "Deny access", bacause of
                                                   wrong policy)
    Number of conflicts:        0   (grep on log: "Conflict Happened")

    DB updated:
        Initial Snapshot    (part of DB relevant to this example)
            Subject Attributes  = {'1111': {'position': 'employee',
                                                'history': ''}
                                   '3333': {'position': 'listener'}}
	        Resource Attributes = {'999': {'id': 'bank A'}
	                               '777': {'viewCount': '0', 'type': 'song'}}
	    Final Snapshot      (part of DB relevant to this example)
	        Subject Attributes  = {'1111': {'position': 'employee',
	                                            'history': ''}
	                               '3333': {'position': 'listener'}}
	        Resource Attributes = {'999': {'id': 'bank A'}
	                               '777': {'viewCount': '1', 'type': 'song'}}

    Servicing order of Requests can be seen on console and also by grep in
    log with 'Request Queue Demo:'


7.  Stress Test

    Config File:    stressTest.ini
    Log File:       stressTest.log

    Description:
    Scenario:   Lots of different requests are generated
                Number of Clients:          10
                Number of requests sent:    1100
                Request:                    1   (>1000 requests)
                    Subject Attributes:         position="viewer"
                    Resource Attributes:        type="movie"
                                                        viewCount="&lt;1000"
                    Action:                     name="stressTest"
                Request:                    2
                    Subject Attributes:         position="employee" history=""
                    Resource Attributes:        id="bank A"
                    Action:                     name="read"
                Request:                    3
                    Subject Attributes:         position="employee"
                                                        history="$resource.id"
                    Resource Attributes:        id="bank A"
                    Action:                     name="read"
                Request:                    4
                    Subject Attributes:         position="listener"
                    Resource Attributes:        type="song" viewCount="&lt;5"
                    Action:                     name="view"
                There should be a total of 1100 responses sent to Client
    There are more than 1000 requests of Request type 1. The value in final
    DB snapshot should reflect viewCount to be 1000.

    Artificial Delays inserted:
    None

    Outcome:
    The test passed as expected.
    Number of allowed accesses: 1033   (grep on log: "Allow access")
    Number of denied accesses:    67   (grep on log: "Deny access")
    Total number of accesses:   1100   (= Total number of sent requests)

    DB updated:
        Initial Snapshot    (part of DB relevant to this example)
            Subject Attributes = {'1111': {'position': 'employee',
                                                'history': ''},
                                  '3333': {'position': 'listener'},
                                  '2222': {'position': 'viewer'}}
            Resource Attributes = {'999': {'id': 'bank A'},
                                   '666': {'movie': 'StarWars'},
                                   '777': {'viewCount': '0', 'type': 'song'},
                                   '888': {'viewCount': '0', 'type': 'movie'}}
	    Final Snapshot      (part of DB relevant to this example)
	        Subject Attributes = {'1111': {'position': 'employee',
	                                            'history': 'bank A'},
                                  '3333': {'position': 'listener'},
                                  '2222': {'position': 'viewer'}}
            Resource Attributes = {'999': {'id': 'bank A'},
                                   '666': {'movie': 'StarWars'},
                                   '777': {'viewCount': '5', 'type': 'song'},
                                   '888': {'viewCount': '1000', 'type': 'movie'}}

    The final viewCount confirms that all the requests got serviced.
    The final viewCount on movie confirms that the >=1000 requests on movie
    were served.


8.  Generation of random sequence of Requests

    The previous test scenario 7 uses random sequence generator to generate
    >=1000 requests on movies and we see that those many requests are generated.
    So this test scenario is covered by test scenario 7.


9.  Database min/max Latency

    All the previous test have been implemented with minDbLatency = 1 and
    maxDbLatency = 5. A random value between the two is generated and
    considered as the latency.

    This can be seen by grep on any of the logs from previous test scenarios.
    The latency would be equal to the time difference between the following
    two greps:
    1.  Subject Coordinator: Sending message to DB to commit the updated
                                                            subject attributes
        OR
        Resource Coordinator: Sending message to DB to commit the updated
                                                            resource attributes
    AND
    2.  Successfully updated database for subject attributes with map
        OR
        Successfully updated database for resource attributes with map


10. Graceful shutdown of the application

    From all the above test cases it could be confirmed that the application
    shuts down gracefully. After the execution in all the Client processes
    finish, they join in the master process. Once all the Client processes
    join, the master process sends a done signal to other processes leading
    to a graceful shutdown.
